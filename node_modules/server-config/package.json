{
  "name": "server-config",
  "version": "0.1.0",
  "description": "Load Configuration for Servers from Environment Variables, Config Files, EC2 Meta Data, etc",
  "contributors": [
    {
      "name": "Joachim Kainz",
      "email": "jfk@jolira.com",
      "url": "http://www.jolira.com"
    }
  ],
  "repository": {
    "url": "https://github.com/jolira/server-config.git",
    "type": "git"
  },
  "bugs": {
    "mail": "dev@jolira.com",
    "url": "http://github.com/jolira/server-config/issues"
  },
  "dependencies": {
    "batch": "*"
  },
  "main": "index",
  "engines": {
    "node": ">= 0.6.0 < 0.9.0"
  },
  "readme": "server-config\n=============\n\nOne of the fundamental problems of software development is keeping configuration information for\ndifferent environments. Most organizations distinguish environments such as DEV, QA, Staging, and\nProduction.\n\nThe configuration approach promoted by this little utility makes it uncesseary to keep an elaborate\nbuild process supporting these different enviroments. Using this utility, configuration information\ncan be stored in embedded defaults that can be overriden using a configuration file and\nenvironment variables.\n\n\n# Example\n\n```\nvar path = require('path'),\n    loadConfig = require('server-config'),\n    ec2instance = loadConfig.ec2instance,\n    embedded = {\n      \"httpPort\": 80,\n      \"httpsPort\": 443,\n      \"seaPort\": 9090\n    },\n    host = '~/.defaults.json#myapp',\n    env = {\n        mongdb: process.env[\"MONGODB\"],\n        seaPort: process.env[\"SEA_PORT\"]\n    },\n    ec2 = {\n        \"public-hostname\":ec2instance(\"meta-data/public-hostname\"),\n        \"hostname\":ec2instance(\"meta-data/hostname\")\n    };\n\n    loadConfig(embedded, host, env, ec2, function(err, config) {\n        if (err) {\n          throw err();\n        }\n    });\n```\n\nLet's further assume the ``host`` file contains:\n\n```\n{\n  \"myapp\": {\n    \"httpPort\": 3000,\n    \"mongodb\": \"mongodb://localhost/testbase\",\n    \"welcomeMsg: \"Hellow World!\"\n  }\n}\n```\n\nLastly, let's assume that there is one evnironment variable defined:\n\n```\nexport SEA_PORT=2000\n```\n\nIf all this is the case, the resulting config information returned by the call above would be:\n\n```\n{\n  \"httpPort\": 3000,\n  \"httpsPort\": 443,\n  \"welcomeMsg: \"Hellow World!\",\n  \"seaPort\": 2000\n}\n```\n",
  "_id": "server-config@0.1.0",
  "dist": {
    "shasum": "ae8e851e536f5628bb5e43842bcf28e9f53d4ba9",
    "tarball": "http://registry.npmjs.org/server-config/-/server-config-0.1.0.tgz"
  },
  "_npmVersion": "1.1.59",
  "_npmUser": {
    "name": "jfk",
    "email": "jfk@jolira.com"
  },
  "maintainers": [
    {
      "name": "jfk",
      "email": "jfk@jolira.com"
    }
  ],
  "directories": {},
  "_shasum": "ae8e851e536f5628bb5e43842bcf28e9f53d4ba9",
  "_from": "server-config@",
  "_resolved": "https://registry.npmjs.org/server-config/-/server-config-0.1.0.tgz"
}
